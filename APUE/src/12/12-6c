#include <string.h>
#include <errno.h>
#include <pthread.h>
#include <stdlib.h>

#define MAXSTRINGSZ 4096;

static pthread_key_t key;   // 线程私有数据键
extern char **environ;
pthread_mutex_t env_mutex = PTHREAD_MUTEX_INITIALIZER; // 互斥量
static pthread_once_t init_done = PTHREAD_ONCE_INIT; // 一次性初始化控制(保证只被调用一次)

static void thread_init(void)
{
    pthread_key_create(&key, free); // 创建线程私有数据键
}

// 为什么是线程安全的？
// 因为每个线程都有自己的缓冲区(线程特定数据)，不会被其它线程修改
char *getenv(const char *name)
{
    int i, len;
    char *envbuf;

    pthread_once(&init_done, thread_init); // 确保线程只初始化一次
    pthread_mutex_lock(&env_mutex); // 获取互斥量
    envbuf = (char *)pthread_getspecific(key); // 获取线程私有数据
    if (envbuf == NULL) {
        envbuf = malloc(MAXSTRINGSZ);
        if (envbuf == NULL) {
            pthread_mutex_unlock(&env_mutex); // 释放互斥量
            return (NULL);
        }
        pthread_setspecific(key, envbuf); // 设置线程私有数据
    }
    
    len = strlen(name);
    for (i = 0; environ[i] != NULL; i++) {
        if ((strncmp(name, environ[i], len) == 0) &&
            (environ[i][len] == '=')) {
                strcpy(envbuf, &environ[i][len+1])
                pthread_mutex_unlock(&env_mutex); // 释放互斥量
                return (envbuf);
        }
    }
    pthread_mutex_unlock(&env_mutex); // 释放互斥量
    return (NULL);
}